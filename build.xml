<?xml version="1.0" encoding="utf-8"?>
<project name="testlib4j" default="compile-src" basedir=".">
    <property name="build.dir" location="build"/>
    <property name="deploy.dir" location="deploy"/>
    <property name="example.files.dir" location="example-files"/>

    <property name="src.source.dir"   location="src"/>
    <property name="src.build.dir"    location="${build.dir}/src"/>
    <property name="tests.source.dir" location="tests"/>
    <property name="tests.build.dir"  location="${build.dir}/tests"/> 
    <property name="examples.source.dir" location="examples"/>
    <property name="examples.build.dir"  location="${build.dir}/examples"/>
    <property name="examples.deploy.dir" location="${deploy.dir}/examples"/>

    <path id="src.deps">
        <pathelement location="${src.build.dir}"/>
    </path>

    <target name="init">
        <tstamp>
            <format property="DSTAMP" pattern="yyyy-MM-dd" locale="US"/>
        </tstamp>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${deploy.dir}"/>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${deploy.dir}"/>
    </target>
    
    <target name="compile-src" depends="init">
        <mkdir dir="${src.build.dir}"/>
        <javac
            srcdir="${src.source.dir}"
            destdir="${src.build.dir}"
            encoding="utf-8"
            includeantruntime="false"
        >
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <jar destfile="${deploy.dir}/testlib4j.jar" basedir="${src.build.dir}"/>
    </target>

    <macrodef name="compile-example-checker">
        <attribute name="checker"/>
        <sequential>
            <mkdir dir="${examples.build.dir}/@{checker}"/>
            <javac srcdir="${examples.source.dir}" destdir="${examples.build.dir}/@{checker}" includeantruntime="false">
                <include name="@{checker}.java"/>
                <classpath refid="src.deps"/>
            </javac>
            <jar destfile="${examples.deploy.dir}/@{checker}.jar" basedir="${examples.build.dir}/@{checker}">
                <manifest>
                    <attribute name="Checker-Class" value="@{checker}"/>
                </manifest>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="test-example-checker">
        <attribute name="description"/>
        <attribute name="checker"/>
        <attribute name="input"/>
        <attribute name="output"/>
        <attribute name="answer"/>
        <attribute name="expected-exit-code"/>
        <sequential>
            <echo level="info" message="Running checker @{checker} on test: @{description}"/>
            <local name="actual-exit-code"/>
            <local name="stored-output"/>
            <local name="stored-error"/>
            <java fork="true" classname="ru.ifmo.testlib.CheckerFramework"
                  resultproperty="actual-exit-code" outputproperty="stored-output" errorproperty="stored-error">
                <classpath>
                    <pathelement location="${deploy.dir}/testlib4j.jar"/>
                    <pathelement location="${examples.deploy.dir}/@{checker}.jar"/>
                </classpath>
                <arg value="${example.files.dir}/@{input}"/>
                <arg value="${example.files.dir}/@{output}"/>
                <arg value="${example.files.dir}/@{answer}"/>
            </java>
            <!--suppress AntResolveInspection IDEA does not know why actual-exit-code exists here -->
            <fail>
                <condition>
                    <not>
                        <!--suppress AntResolveInspection IDEA does not know why actual-exit-code exists here -->
                        <equals arg1="@{expected-exit-code}" arg2="${actual-exit-code}"/>
                    </not>
                </condition>
Exit codes do not match: expected @{expected-exit-code} found ${actual-exit-code}
Standard Output:
${stored-output}
Standard Error:
${stored-error}
            </fail>
        </sequential>
    </macrodef>

    <target name="compile-examples" depends="compile-src">
        <compile-example-checker checker="CompareNumber"/>
        <compile-example-checker checker="YesNo"/>
    </target>

    <target name="test-example-compare-number" depends="compile-examples">
        <test-example-checker description="Two equal files with single numbers"
                              checker="CompareNumber" expected-exit-code="0"
                              input="just-text.txt" output="number-42.txt" answer="number-42.txt"/>
        <test-example-checker description="Two different files with single numbers"
                              checker="CompareNumber" expected-exit-code="1"
                              input="just-text.txt" output="number-32.txt" answer="number-42.txt"/>
        <test-example-checker description="Only contestant's output is not-a-number"
                              checker="CompareNumber" expected-exit-code="2"
                              input="just-text.txt" output="yes.txt" answer="number-32.txt"/>
        <test-example-checker description="Both files are not-a-numbers and equal"
                              checker="CompareNumber" expected-exit-code="3"
                              input="just-text.txt" output="no.txt" answer="no.txt"/>
        <test-example-checker description="Both files are not-a-numbers and different"
                              checker="CompareNumber" expected-exit-code="3"
                              input="just-text.txt" output="yes.txt" answer="no.txt"/>
        <test-example-checker description="Only jury's output is not-a-number"
                              checker="CompareNumber" expected-exit-code="3"
                              input="just-text.txt" output="number-32.txt" answer="no.txt"/>
        <test-example-checker description="Contestant's file does not exist"
                              checker="CompareNumber" expected-exit-code="2"
                              input="just-text.txt" output="does-not-exist" answer="number-32.txt"/>
        <test-example-checker description="Jury's file does not exist"
                              checker="CompareNumber" expected-exit-code="3"
                              input="just-text.txt" output="number-32.txt" answer="does-not-exist"/>
        <test-example-checker description="Contestant's file is empty"
                              checker="CompareNumber" expected-exit-code="2"
                              input="just-text.txt" output="empty.txt" answer="number-32.txt"/>
        <test-example-checker description="Jury's file is empty"
                              checker="CompareNumber" expected-exit-code="3"
                              input="just-text.txt" output="number-32.txt" answer="empty.txt"/>
        <test-example-checker description="Jury's file does not exist and contestant's file is not-a-number"
                              checker="CompareNumber" expected-exit-code="3"
                              input="just-text.txt" output="yes.txt" answer="does-not-exist"/>
        <test-example-checker description="Jury's file is empty and contestant's file is not-a-number"
                              checker="CompareNumber" expected-exit-code="3"
                              input="just-text.txt" output="yes.txt" answer="empty.txt"/>
        <test-example-checker description="Contestant's file matches but has an extra output"
                              checker="CompareNumber" expected-exit-code="2"
                              input="just-text.txt" output="numbers-two-42s.txt" answer="number-42.txt"/>
        <test-example-checker description="Contestant's file does not match and has an extra output"
                              checker="CompareNumber" expected-exit-code="1"
                              input="just-text.txt" output="numbers-two-42s.txt" answer="number-32.txt"/>
        <!-- TODO I am not sure whether we want this -->
        <test-example-checker description="Jury's file has an extra output"
                              checker="CompareNumber" expected-exit-code="0"
                              input="just-text.txt" output="number-42.txt" answer="numbers-two-42s.txt"/>
    </target>

    <target name="test-example-yesno" depends="compile-examples">
        <test-example-checker description="Two equal files with YES"
                              checker="YesNo" expected-exit-code="0"
                              input="just-text.txt" output="yes.txt" answer="yes.txt"/>
        <test-example-checker description="Two equal files with NO"
                              checker="YesNo" expected-exit-code="0"
                              input="just-text.txt" output="no.txt" answer="no.txt"/>
        <test-example-checker description="Expected YES, found NO"
                              checker="YesNo" expected-exit-code="1"
                              input="just-text.txt" output="no.txt" answer="yes.txt"/>
        <test-example-checker description="Expected NO, found YES"
                              checker="YesNo" expected-exit-code="1"
                              input="just-text.txt" output="yes.txt" answer="no.txt"/>
        <test-example-checker description="Contestant's file is neither YES nor NO"
                              checker="YesNo" expected-exit-code="2"
                              input="just-text.txt" output="number-42.txt" answer="no.txt"/>
        <test-example-checker description="Jury's file is neither YES nor NO"
                              checker="YesNo" expected-exit-code="3"
                              input="just-text.txt" output="yes.txt" answer="number-42.txt"/>
        <test-example-checker description="Contestant's file does not exist"
                              checker="YesNo" expected-exit-code="2"
                              input="just-text.txt" output="does-not-exist" answer="no.txt"/>
        <test-example-checker description="Jury's file does not exist"
                              checker="YesNo" expected-exit-code="3"
                              input="just-text.txt" output="yes.txt" answer="does-not-exist"/>
        <test-example-checker description="Contestant's file is empty"
                              checker="YesNo" expected-exit-code="2"
                              input="just-text.txt" output="empty.txt" answer="no.txt"/>
        <test-example-checker description="Jury's file is empty"
                              checker="YesNo" expected-exit-code="3"
                              input="just-text.txt" output="yes.txt" answer="empty.txt"/>
        <test-example-checker description="Contestant's file matches but has an extra output"
                              checker="YesNo" expected-exit-code="2"
                              input="just-text.txt" output="just-text.txt" answer="yes.txt"/>
        <test-example-checker description="Contestant's file does not match and has an extra output"
                              checker="YesNo" expected-exit-code="1"
                              input="just-text.txt" output="just-text.txt" answer="no.txt"/>
        <!-- TODO I am not sure whether we want this -->
        <test-example-checker description="Jury's file has an extra output"
                              checker="YesNo" expected-exit-code="0"
                              input="just-text.txt" output="yes.txt" answer="just-text.txt"/>
    </target>

    <target name="test-examples" depends="test-example-compare-number, test-example-yesno"/>
</project>
